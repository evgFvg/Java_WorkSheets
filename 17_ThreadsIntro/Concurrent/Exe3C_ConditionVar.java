import java.util.List;
import java.util.concurrent.Semaphore;
import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

public class Exe3C_ConditionVar {
    private static final CondVar spp = new CondVar();

    public static void main(String[] args) {
        Thread prod = new Thread(() -> {
            try {
                spp.produce();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        Thread cons1 = new Thread(() -> {
            try {
                spp.consume();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        Thread cons2 = new Thread(() -> {
            try {
                spp.consume();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });
        Thread cons3 = new Thread(() -> {
            try {
                spp.consume();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        });

        List<Thread> threadArr = List.of(prod, cons1, cons2, cons3);

        for(Thread t: threadArr) {
            t.start();
        }

        try {
            for(Thread t: threadArr) {
                t.join();
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

    }
}

class CondVar {
    private static final Semaphore sem = new Semaphore(0);
    private final Lock lock = new ReentrantLock();
    private final Condition condVar = lock.newCondition();
    private static int msgNum = 0;
    private static final int CONS_NUMBER = 3;

    public void produce() throws InterruptedException {
        while (msgNum < 10) {
            try {
                sem.acquire(CONS_NUMBER);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println("Msg #" + msgNum + " generated by producer...");
            ++msgNum;
            lock.lock();
            condVar.signalAll();
            lock.unlock();
        }
    }

    public void consume() throws InterruptedException {
        while (msgNum < 10) {
            try {
                lock.lock();
                sem.release();
                condVar.await();
                lock.unlock();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
            System.out.println("Thread #" + Thread.currentThread().getId() + " received msg " + msgNum);
        }
    }
}


